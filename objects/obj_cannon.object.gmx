<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cannon</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init

verMulti = 5
horMulti = 5
useFrictionx = 1
useFrictiony = 1
maxDist = 400
time = 0

mouseAngle = 0
mouseDistance = 0

inLaunch = false
lineWidth = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>line_width = max(4, mouseDistance / 30)
mouseAngle = point_direction(x, y, mouse_x, mouse_y)
mouseDistance = point_distance(x, y, mouse_x, mouse_y)

if(!global.clickPlace &amp;&amp; inLaunch) {   
    with (instance_create(x, y, obj_bomb)) {
        horSpeed = lengthdir_x(min(obj_cannon.maxDist,obj_cannon.mouseDistance)/obj_cannon.horMulti,obj_cannon.mouseAngle)
        time=lengthdir_x(min(obj_cannon.maxDist,obj_cannon.mouseDistance),obj_cannon.mouseAngle)/horSpeed
        verSpeed = lengthdir_y(min(obj_cannon.maxDist,obj_cannon.mouseDistance)/obj_cannon.verMulti,obj_cannon.mouseAngle)-grav*obj_cannon.time
    }
    launchDone=false
    inLaunch=false
}

if(mouse_check_button(mb_left)) {
    inLaunch=true
}
else {
    inLaunch=false
}

image_angle = mouseAngle
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth=1
if(!global.clickPlace &amp;&amp; inLaunch)
{
    draw_set_alpha(1)
    if(mouseDistance &lt; maxDist)
    {
        draw_line_width_color(x,y,mouse_x,mouse_y,max(4,min(mouseDistance/(maxDist/8),8)),c_yellow,c_red)
    }
    else
    {
        draw_line_width_color(x,y,x+lengthdir_x(maxDist,mouseAngle),y+lengthdir_y(maxDist,mouseAngle),8,c_yellow,c_red)
    }
}

if(mouse_check_button(mb_left) &amp;&amp; !inLaunch)
{
    draw_set_alpha(0.25)
    if(mouseDistance &lt;= maxDist)
    {
        draw_line_width_color(x,y,mouse_x,mouse_y,max(4,min(mouseDistance/(maxDist/8),8)),c_yellow,c_red)
    }
    else
    {
        draw_line_width_color(x,y,x+lengthdir_x(maxDist,mouseAngle),y+lengthdir_y(maxDist,mouseAngle),8,c_yellow,c_red)
    }
    draw_set_alpha(1)
}

draw_sprite(spr_cannonBase,0,x,y)
draw_self()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
